// Generated by CoffeeScript 1.6.2
var Call, Emitter,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Emitter = require('emitter');

Call = (function(_super) {
  __extends(Call, _super);

  function Call(_call, phone) {
    var _this = this;

    this._call = _call;
    this.phone = phone;
    this._call.bind({
      onRing: function() {
        return _this.emit("ring");
      },
      onAnswer: function() {
        return _this.emit("answer");
      },
      onError: function(e) {
        return _this.emit("error", e);
      },
      onHangup: function() {
        return _this.emit("hangup");
      }
    });
  }

  Call.prototype.id = function() {
    return this._call.id;
  };

  Call.prototype.state = function() {
    return this._call.state;
  };

  Call.prototype.energy = function() {
    return this._call.energy();
  };

  Call.prototype.press = function(n) {
    return this._call.digit(n);
  };

  Call.prototype.pushToTalk = function(b) {
    return this._call.pushToTalk(b);
  };

  Call.prototype.talking = function(b) {
    return this._call.talking(b);
  };

  Call.prototype.mute = function(b) {
    return this._call.mute(b);
  };

  Call.prototype.hold = function(b) {
    return this._call.hold(b);
  };

  Call.prototype.volume = function(n) {
    return this._call.volume(n);
  };

  Call.prototype.gain = function(n) {
    return this._call.gain(n);
  };

  Call.prototype.answer = function() {
    return this._call.answer();
  };

  Call.prototype.hangup = function() {
    return this._call.hangup();
  };

  Call.prototype.ready = function(fn) {
    if (this._ready) {
      return fn();
    } else {
      return this.once("ready", fn);
    }
  };

  return Call;

})(Emitter);

module.exports = Call;
